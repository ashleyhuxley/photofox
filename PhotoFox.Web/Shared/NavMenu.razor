@using PhotoFox.Model
@using PhotoFox.Services

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        @foreach (var album in Albums.OrderBy(a => a.Title))
        {
            <div class="nav-item px-3">
                <div>
                    <div class="album-img"><a href="album/@album.AlbumId"><img src="/thumbnail/@album.CoverPhotoId" style="width: 250px;" alt="@album.Title" /></a></div>
                    <div class="album-title"><a href="album/@album.AlbumId">@album.Title</a> <a href="map/@album.AlbumId">(View Map)</a></div>
                </div>
            </div>
        }
    </nav>
</div>

@inject IPhotoAlbumService AlbumService;

@code {
    private bool collapseNavMenu = true;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private List<PhotoAlbum> Albums { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    public NavMenu()
    {
        this.Albums = new List<PhotoAlbum>();
    }

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    private async Task LoadAlbums()
    {
        var authState = await authenticationStateTask;
        var user = authState.User;

        IAsyncEnumerable<PhotoAlbum> lookup;

        if (user?.Identity is null || string.IsNullOrEmpty(user.Identity.Name))
        {
            lookup = this.AlbumService.GetPublicAlbumsAsync();
        }
        else
        {
            lookup = user.Identity.Name == "fiona"
                 ? this.AlbumService.GetAllAlbumsAsync()
                 : this.AlbumService.GetAllAlbumsAsync(user.Identity.Name);
        }

        this.Albums.Clear();
        await foreach(var album in lookup)
        {
            this.Albums.Add(album);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await this.LoadAlbums();
    }
}
