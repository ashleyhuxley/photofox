@page "/album/{albumid}"
@using PhotoFox.Core.Extensions
@using PhotoFox.Model
@using PhotoFox.Services

@if (loading)
{
    <div id="loading">Laden...</div>
}
else
{
    <div id="photos">
        @foreach (var group in Photos.GroupBy(p => p.DateTaken.Date).OrderByDescending(g => g.Key))
        {
            <div class="date-header" style="clear: both;">
                @group.Key.ToLongDateString()
            </div>

            <div class="gal-container">
                <ul class="gal-list">
                    @foreach (var photo in group)
                    {
                        var dateKey = photo.DateTaken.ToPartitionKey();
                        var idKey = photo.PhotoId;

                        <li>
                            <a href="/photo/@dateKey/@idKey">
                                <div class="img">
                                    <img src="/thumbnail/@photo.PhotoId" alt="@photo.Title" />
                                </div>
                                <div class="caption"><span>@photo.Title</span></div>
                            </a>
                        </li>
                    }
                </ul>
            </div>
        }
    </div>
}

@inject IPhotoService PhotoService;
@inject IPhotoAlbumService AlbumService;

@code {
    private List<Photo> Photos { get; set; }

    public Album()
    {
        this.Photos = new List<Photo>();
    }

    private async Task LoadPhotos()
    {
        this.Photos.Clear();
        await foreach(var photo in this.PhotoService.GetPhotosInAlbumAsync(AlbumId))
        {
            this.Photos.Add(photo);
        }
    }

    [Parameter]
    public string? AlbumId { get; set; }

    public PhotoAlbum? LoadedAlbum { get; set; }

    private bool loading = false;

    protected async override Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        this.LoadedAlbum = await this.AlbumService.GetPhotoAlbumAsync(AlbumId);

        loading = true;
        StateHasChanged();

        await this.LoadPhotos();
        loading = false;

        StateHasChanged();
    }
}